<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on kenjisato.jp</title>
    <link>/www.kenjisato.jp/en/post/index.xml</link>
    <description>Recent content in Posts on kenjisato.jp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Feb 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/www.kenjisato.jp/en/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Cross Referenceable Equation with Preview in RMarkdown</title>
      <link>/www.kenjisato.jp/en/post/2017/02/cross-referenceable-equation-with-preview-in-rmarkdown/</link>
      <pubDate>Sun, 12 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/www.kenjisato.jp/en/post/2017/02/cross-referenceable-equation-with-preview-in-rmarkdown/</guid>
      <description>

&lt;h2 id=&#34;cross-referenceable-math-equation-in-rmarkdown&#34;&gt;Cross-referenceable math equation in RMarkdown&lt;/h2&gt;

&lt;p&gt;You can cross-reference equations in Rmarkdown if you set output to
&lt;code&gt;bookdown::pdf_document2&lt;/code&gt; and write equations within
&lt;code&gt;\begin{align} ~ \end{align}&lt;/code&gt; or &lt;code&gt;\begin{equation} ~ \end{equation}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To make a tag, put &lt;code&gt;(\#eq:label_name)&lt;/code&gt; inside a math environment. The equation
can be cross-referenced by  &lt;code&gt;\ï¼ ref(eq:label_name)&lt;/code&gt;. See &lt;a href=&#34;http://stackoverflow.com/a/38884378/1877682&#34;&gt;this stackoverflow answer by Yihui Xie&lt;/a&gt; and
&lt;a href=&#34;https://bookdown.org/yihui/bookdown/markdown-extensions-by-bookdown.html#equations&#34;&gt;the related section of his bookdown book&lt;/a&gt; for more detail.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;\begin{equation*} ~ \end{equation*}&lt;/code&gt; also produces an equation without number.&lt;/p&gt;

&lt;h2 id=&#34;drawback&#34;&gt;Drawback&lt;/h2&gt;

&lt;p&gt;A drawback of using &lt;code&gt;\begin{align} ~ \end{align}&lt;/code&gt; or the like is that
RStudio doesn&amp;rsquo;t support math preview for them (yet). You must embrace
the whole math environment with &lt;code&gt;$$&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;www.kenjisato.jp/assets/images/posts/2017-02-11-math.png&#34; alt=&#34;math preview&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The former looks nicer but causes the &amp;ldquo;Bad math delimiter&amp;rdquo; error at the time
of tex compilation.&lt;/p&gt;

&lt;h2 id=&#34;workaround&#34;&gt;Workaround&lt;/h2&gt;

&lt;h4 id=&#34;step-1&#34;&gt;Step 1&lt;/h4&gt;

&lt;p&gt;Put the following code snippet in .Rprofile file of the project.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;.beginMath = c(
  &amp;quot;\\begin{equation}&amp;quot;,
  &amp;quot;\\begin{equation*}&amp;quot;,
  &amp;quot;\\begin{align}&amp;quot;,
  &amp;quot;\\begin{align*}&amp;quot;
)

.endMath = c(
  &amp;quot;\\end{equation}&amp;quot;,
  &amp;quot;\\end{equation*}&amp;quot;,
  &amp;quot;\\end{align}&amp;quot;,
  &amp;quot;\\end{align*}&amp;quot;
)

.render_for_tex = function(input, ...){
  output_file = gsub(&amp;quot;\\.[R|r]md$&amp;quot;, &amp;quot;.tex&amp;quot;, input)
  lines = readLines(input, encoding = &amp;quot;UTF-8&amp;quot;);

  for (i in seq_along(lines)) {
    # Remove $$ before \begin{equation} or the like.
    if (stringr::str_trim(lines[i]) == &amp;quot;$$&amp;quot;) {
      if (any(startsWith(lines[i + 1], .beginMath))) {
        lines[i] = &amp;quot;&amp;quot;
      } else if (any(endsWith(lines[i - 1], .endMath))) {
        lines[i] = &amp;quot;&amp;quot;
      }
    }
  }
  writeLines(lines,&amp;quot;temp.Rmd&amp;quot;); on.exit(unlink(&#39;temp.Rmd&#39;))
  rmarkdown::render(&amp;quot;temp.Rmd&amp;quot;, output_file = output_file)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;step-2&#34;&gt;Step 2&lt;/h4&gt;

&lt;p&gt;Add &lt;code&gt;knit: .render_for_math&lt;/code&gt; to the YAML header of your Rmd file.
Then the Knit button of RStudio is overwritten with the custom renderer
with preprocessing defined in .Rprofile.&lt;/p&gt;

&lt;p&gt;The YAML fromtmatter looks like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;---
title: title
author: author
output:
  bookdown::pdf_document2:
    toc: false
    fig_caption: yes
knit: .render_for_tex
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;www.kenjisato.jp/assets/pdf/math_workaround_pdf.pdf&#34;&gt;This PDF file&lt;/a&gt; is generated by &lt;a href=&#34;https://gist.github.com/kenjisato/38a646042ab6d64788c24c51cf36aae7&#34;&gt;the Rmd file and .Rprofile stored here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Computation of the Optimal Policy for the Optimal Growth (Euler Equation)</title>
      <link>/www.kenjisato.jp/en/post/2017/01/computation-of-the-optimal-policy-for-the-optimal-growth-euler-equation/</link>
      <pubDate>Sun, 15 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/www.kenjisato.jp/en/post/2017/01/computation-of-the-optimal-policy-for-the-optimal-growth-euler-equation/</guid>
      <description>&lt;p&gt;(Mainly for students attending &lt;a href=&#34;www.kenjisato.jp/teaching/ma/2016Q4&#34;&gt;my class&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;As supplementary matrials on our way to understanding the optimal growth
model, I put an R code and related documents on my github repository:
&lt;a href=&#34;https://github.com/kenjisato/intro-macro&#34;&gt;kenjisato/intro-macro&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kenjisato/intro-macro/blob/master/r/optimal_growth_euler.R&#34;&gt;/r/optimal_growth_euler.R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kenjisato/intro-macro/blob/master/doc/r/optimal_growth_euler.Rmd&#34;&gt;/doc/r/optimal_growth_euler.Rmd&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kenjisato/intro-macro/blob/master/doc/r/optimal_growth_euler.pdf&#34;&gt;Compiled PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I do this mainly for a pedagogical reason. As a matter of fact, the above
mentioned script &lt;strong&gt;isn&amp;rsquo;t practical&lt;/strong&gt;; it does work if the initial condition is
close to the steady state and the initial guesses of optimal consumption are
sufficiently accurate but otherwise doesn&amp;rsquo;t (it&amp;rsquo;d take very loong time).&lt;/p&gt;

&lt;p&gt;The only utility of this excercise is to show how it is difficult to compute
the optimal policy!&lt;/p&gt;

&lt;p&gt;Human beings (as main agents in our economic system) might have a different
decision making strategy such as adaptive learning (when you realize that you
aren&amp;rsquo;t on the right track you will make some adjustments).
Incorporating such notion in formal analysis might be an interesting
direction but is beyond the scope of the course.&lt;/p&gt;

&lt;p&gt;We, in fact, have a more practical method to compute the optimal policy, in which
we exploit the technique of dynamic programming. This will be discussed elsewhere.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>